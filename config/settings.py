"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
import mongoengine
from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-(nap2r)a$+asht$pmzb$eryl8i!j=6wd_s(*1(ntuftbvmf&%v')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,testserver', cast=Csv())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_q',
    #"debug_toolbar",
    'users',
    'github.apps.GithubConfig',
    'projects',
    'analytics',
    'developers',
    'repositories',
    'install',
    'management',
    'sonarcloud',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #"debug_toolbar.middleware.DebugToolbarMiddleware",
]
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]
ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases



# MongoDB Configuration
MONGODB_HOST = config('MONGODB_HOST', default='localhost')
MONGODB_PORT = int(config('MONGODB_PORT', default=27017))
MONGODB_NAME = config('MONGODB_NAME', default='gitpulse')

# Connect to MongoDB
mongoengine.connect(
    db=MONGODB_NAME,
    host=MONGODB_HOST,
    port=MONGODB_PORT,
)

if os.getenv("USE_SQLITE_FOR_TESTS") == "1":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",  # ou os.path.join(BASE_DIR, "test.sqlite3")
            "OPTIONS": {
                "timeout": 20,
            },
            "ATOMIC_REQUESTS": False,
            "AUTOCOMMIT": True,
        }
    }
else:
    # PostgreSQL Configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('POSTGRES_DB', default='gitpulse_new'),
            'USER': config('POSTGRES_USER', default='gitpulse_user'),
            'PASSWORD': config('POSTGRES_PASSWORD', default='gitpulse_password'),
            'HOST': config('POSTGRES_HOST', default='localhost'),
            'PORT': config('POSTGRES_PORT', default='5432'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = config('LANGUAGE_CODE', default='en-us')

TIME_ZONE = config('TIME_ZONE', default='Europe/Paris')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
LOGIN_URL = '/users/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Django-Q Configuration
Q_CLUSTER = {
    'name': 'GitPulse',
    'workers': config('Q_WORKERS', default=4, cast=int),
    'recycle': config('Q_RECYCLE', default=500, cast=int),
    'timeout': config('Q_TIMEOUT', default=3600, cast=int),  # 30 minutes for indexing tasks
    'retry': config('Q_RETRY', default=4000, cast=int),    # retry > timeout (en secondes)
    'compress': True,
    'save_limit': config('Q_SAVE_LIMIT', default=250, cast=int),
    'queue_limit': config('Q_QUEUE_LIMIT', default=500, cast=int),
    'cpu_affinity': config('Q_CPU_AFFINITY', default=1, cast=int),
    'label': 'Django Q',
    'mongo': {
        'host': MONGODB_HOST,
        'port': MONGODB_PORT,
    },
    'mongo_db': MONGODB_NAME,
}

# GitPulse Configuration
# Choose indexing service: 'git_local' or 'github_api'
INDEXING_SERVICE = config('INDEXING_SERVICE', default='git_local')

# GitHub API Configuration (only used if INDEXING_SERVICE = 'github_api')
GITHUB_API_RATE_LIMIT_WARNING = int(config('GITHUB_API_RATE_LIMIT_WARNING', default=10))
GITHUB_API_TIMEOUT = int(config('GITHUB_API_TIMEOUT', default=30))

# Ollama Configuration
OLLAMA_HOST = config('OLLAMA_HOST', default='http://localhost:11434')
OLLAMA_MODEL = config('OLLAMA_MODEL', default='gemma3:4b')

SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Auth locale
    'allauth.account.auth_backends.AuthenticationBackend',  # Auth sociale
]

# allauth settings de base
ACCOUNT_LOGIN_METHODS = {'username', 'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'

# Social account settings to avoid confirmation page
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

SOCIALACCOUNT_PROVIDERS = {
    'github': {}
}

# Django Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': config('CACHE_TIMEOUT', default=3600, cast=int),  # 1 hour default timeout
        'OPTIONS': {
            'MAX_ENTRIES': config('CACHE_MAX_ENTRIES', default=1000, cast=int),  # Maximum number of entries in cache
        }
    }
}

# Cache settings for analytics
ANALYTICS_CACHE_TIMEOUT = config('ANALYTICS_CACHE_TIMEOUT', default=1, cast=int)  # 1 hour for analytics data
PR_METRICS_CACHE_TIMEOUT = config('PR_METRICS_CACHE_TIMEOUT', default=1, cast=int)  # 30 minutes for PR metrics
COMMIT_METRICS_CACHE_TIMEOUT = config('COMMIT_METRICS_CACHE_TIMEOUT', default=1, cast=int) # 2 hours for commit metrics

SOCIALACCOUNT_LOGIN_ON_GET = True

# Custom adapter to capture GitHub tokens
SOCIALACCOUNT_ADAPTER = 'users.adapters.CustomSocialAccountAdapter'

# GitHub OAuth configuration with required scopes
SOCIALACCOUNT_PROVIDERS = {
    'github': {
        'SCOPE': [
            'user:email',  # Access to user email addresses
            'repo',        # Full access to repositories (public and private)
            'read:org',    # Read organization membership and teams
        ],
        'VERIFIED_EMAIL': True,  # Require verified email
    }
}

# Logging Configuration
import os
from datetime import datetime

# Create logs directory if it doesn't exist
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'detailed': {
            'format': '[{asctime}] {levelname} {name} {funcName}:{lineno} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'django.log',
            'formatter': 'detailed',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'error.log',
            'formatter': 'detailed',
        },
        'analytics_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'analytics.log',
            'formatter': 'detailed',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'analytics': {
            'handlers': ['console', 'analytics_file', 'error_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django_q': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
}